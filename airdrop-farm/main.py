#!/usr/bin/env python3
"""
NT EXHAUST - CRYPTAL AI AUTO BOT
Python –≤–µ—Ä—Å–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á Cryptal AI
"""

import asyncio
import os
import sys
from colorama import Fore, Style

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.config_manager import ConfigManager
from src.modules.account_manager import AccountManager
from src.utils.logger import Logger
from src.utils.display import print_banner
from src.utils.helpers import delay

class CryptalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ Cryptal AI"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.account_manager = None
        self.config = {}
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = await self.config_manager.load_config()
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            self.account_manager = AccountManager(self.config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
            await self.config_manager.initialize_proxy_config()
            
            Logger.info("Bot initialization completed", emoji="‚úÖ")
            return True
            
        except Exception as e:
            Logger.error(f"Failed to initialize bot: {e}", emoji="‚ùå")
            return False
    
    async def run_cycle(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            tokens = await self.config_manager.load_tokens()
            if not tokens:
                Logger.error("No tokens found. Please add tokens to data/token.txt", emoji="‚ùå")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            proxies = self.config_manager.get_proxies()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            results = await self.account_manager.process_multiple_accounts(tokens, proxies)
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            successful_accounts = sum(1 for result in results if result.get('success', False))
            failed_accounts = len(results) - successful_accounts
            
            Logger.info(
                f"Cycle completed: {successful_accounts} successful, {failed_accounts} failed accounts",
                emoji="üìä"
            )
            
            return True
            
        except Exception as e:
            Logger.error(f"Error during cycle execution: {e}", emoji="‚ùå")
            return False
    
    async def run_continuous(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        cycle_count = 1
        
        while True:
            try:
                Logger.info(f"Starting cycle #{cycle_count}", emoji="üîÑ")
                
                success = await self.run_cycle()
                if not success:
                    Logger.warn("Cycle failed, but continuing...", emoji="‚ö†Ô∏è")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                cycle_delay = self.config.get('delays', {}).get('cycle_delay', 86400)  # 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                Logger.info(
                    f"Cycle #{cycle_count} completed. Waiting {cycle_delay/3600:.1f} hours for next cycle...",
                    emoji="‚è∞"
                )
                
                await delay(cycle_delay)
                cycle_count += 1
                
            except KeyboardInterrupt:
                Logger.info("Bot stopped by user", emoji="üëã")
                break
            except Exception as e:
                Logger.error(f"Unexpected error in continuous mode: {e}", emoji="‚ùå")
                Logger.info("Retrying in 60 seconds...", emoji="üîÑ")
                await delay(60)
    
    async def run_once(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑"""
        try:
            Logger.info("Running bot in single execution mode", emoji="üéØ")
            success = await self.run_cycle()
            
            if success:
                Logger.success("Single execution completed successfully", emoji="üéâ")
            else:
                Logger.error("Single execution failed", emoji="‚ùå")
                return False
            
            return True
            
        except Exception as e:
            Logger.error(f"Error in single execution mode: {e}", emoji="‚ùå")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –í—ã–≤–æ–¥–∏–º –±–∞–Ω–Ω–µ—Ä
        print_banner()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = CryptalBot()
        
        if not await bot.initialize():
            Logger.error("Bot initialization failed. Exiting.", emoji="‚ùå")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        run_mode = os.getenv('RUN_MODE', 'continuous').lower()
        
        if run_mode == 'once':
            await bot.run_once()
        else:
            await bot.run_continuous()
            
    except KeyboardInterrupt:
        Logger.info("Application stopped by user", emoji="üëã")
    except Exception as e:
        Logger.error(f"Fatal error: {e}", emoji="üí•")
    finally:
        Logger.info("Application shutdown", emoji="üîª")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 7):
        print(f"{Fore.RED}Error: Python 3.7+ required. Current version: {sys.version}{Style.RESET_ALL}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    os.makedirs("data", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Application interrupted{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}Fatal error: {e}{Style.RESET_ALL}")
        sys.exit(1)